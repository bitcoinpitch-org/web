{{ block modal() }}
<div class="modal auth-modal">
  <div class="modal-content">
    <div class="modal-header">
      <h2>Login to BitcoinPitch.org</h2>
      <button class="modal-close" onclick="closeAuthModal()">&times;</button>
    </div>
    
    <div class="auth-methods">
      <!-- Trezor Authentication - DISABLED due to CORP/script loading issues -->
      <!-- TODO: Re-enable when proper npm package integration is implemented -->
      <!--
      <div class="auth-method">
        <button class="auth-button trezor" onclick="loginWithTrezor()">
          <div class="auth-icon">üîê</div>
          <div class="auth-text">
            <strong>Trezor Hardware Wallet</strong>
            <small>Sign with your Trezor device</small>
          </div>
        </button>
      </div>
      -->

      <!-- Nostr Authentication -->
      <div class="auth-method">
        <button class="auth-button nostr" onclick="loginWithNostr()">
          <div class="auth-icon">üü£</div>
          <div class="auth-text">
            <strong>Nostr</strong>
            <small>Sign with your Nostr key</small>
          </div>
        </button>
      </div>

      <!-- Twitter OAuth - DISABLED -->
      <!--
      <div class="auth-method">
        <a href="/auth/twitter" class="auth-button twitter">
          <div class="auth-icon">üê¶</div>
          <div class="auth-text">
            <strong>Twitter / X</strong>
            <small>Sign in with Twitter</small>
          </div>
        </a>
      </div>
      -->

      <!-- Password Authentication Method -->
      <div class="auth-method password-method" style="display: none;" id="password-auth">
        <form class="auth-form" hx-post="/auth/password" hx-target="#auth-result" onsubmit="handlePasswordAuth(event)">
          {{ if isset(CsrfToken) }}
          <input type="hidden" name="_token" value="{{ CsrfToken }}">
          {{ end }}
          
          <div class="form-group">
            <label for="username">Email Address</label>
            <input type="email" id="username" name="username" required>
          </div>
          
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required>
          </div>

          <!-- 2FA field (hidden by default) -->
          <div class="form-group" id="totp-field" style="display: none;">
            <label for="totp_code">Two-Factor Authentication Code</label>
            <input type="text" id="totp_code" name="totp_code" placeholder="123456" maxlength="6">
            <small>Enter the 6-digit code from your authenticator app or use a backup code.</small>
          </div>
          
          <button type="submit" class="auth-button password">
            <span class="auth-text">Sign In</span>
          </button>
        </form>
      </div>

      <!-- Show password option -->
      <div class="auth-divider">
        <span>or</span>
      </div>
      
      <button class="auth-toggle" onclick="togglePasswordAuth()">
        Sign in with username/password
      </button>
    </div>

    <div id="auth-result" class="auth-result"></div>
    
    <div class="auth-footer">
      <p><small>By signing in, you agree to our terms of service and privacy policy.</small></p>
    </div>
  </div>
</div>

<script>
function closeAuthModal() {
  document.querySelector('.auth-modal').style.display = 'none';
}

function showAuthError(message) {
  const authResult = document.getElementById('auth-result');
  authResult.innerHTML = '<div class="auth-error">' + message + '</div>';
  console.log('Auth error shown:', message);
}

function togglePasswordAuth() {
  const passwordAuth = document.getElementById('password-auth');
  const toggle = document.querySelector('.auth-toggle');
  
  if (passwordAuth.style.display === 'none') {
    passwordAuth.style.display = 'block';
    toggle.textContent = 'Hide email/password option';
  } else {
    passwordAuth.style.display = 'none';
    toggle.textContent = 'Sign in with email/password';
  }
}

function handlePasswordAuth(event) {
  // Don't prevent default - let HTMX handle the submission
  return true;
}

// Handle HTMX response for 2FA requirements
document.addEventListener('htmx:afterRequest', function(event) {
  if (event.target.matches('form[hx-post="/auth/password"]')) {
    try {
      const response = JSON.parse(event.detail.xhr.responseText);
      
      if (response.requires_2fa) {
        // Show 2FA field and prompt for code
        const totpField = document.getElementById('totp-field');
        const totpInput = document.getElementById('totp_code');
        const authResult = document.getElementById('auth-result');
        
        totpField.style.display = 'block';
        totpInput.required = true;
        totpInput.focus();
        
        authResult.innerHTML = '<div class="auth-info">Please enter your two-factor authentication code.</div>';
        
        // Clear any previous form validation and set up new validation
        const form = event.target;
        // Remove any existing submit listeners to prevent duplication
        const newForm = form.cloneNode(true);
        form.parentNode.replaceChild(newForm, form);
        
        // Add new submit validation for 2FA
        newForm.addEventListener('submit', function(e) {
          const currentTotpInput = document.getElementById('totp_code');
          if (!currentTotpInput.value.trim()) {
            e.preventDefault();
            document.getElementById('auth-result').innerHTML = '<div class="auth-error">Two-factor authentication code is required.</div>';
          }
        });
        
        // Re-initialize HTMX on the new form
        if (typeof htmx !== 'undefined') {
          htmx.process(newForm);
        }
        
      } else if (response.message === "Authentication successful") {
        // Successful login
        document.getElementById('auth-result').innerHTML = '<div class="auth-success">Authentication successful! Redirecting...</div>';
        setTimeout(() => window.location.reload(), 1000);
      } else if (response.error) {
        // Show error message
        document.getElementById('auth-result').innerHTML = '<div class="auth-error">' + response.error + '</div>';
      }
    } catch (e) {
      // Response is not JSON (might be HTML from HTMX), let HTMX handle it
      console.log('Non-JSON response, letting HTMX handle it');
    }
  }
});

// DISABLED: Trezor authentication due to CORP/script loading issues
// TODO: Re-enable when proper npm package integration is implemented
/*
async function loginWithTrezor() {
  try {
    // Check if Trezor Connect is available
    if (typeof TrezorConnect === 'undefined') {
      throw new Error('Trezor Connect not loaded. Please install Trezor Bridge.');
    }

    const message = "BitcoinPitch Authentication: " + Date.now();
    
    const result = await TrezorConnect.signMessage({
      path: "m/84'/0'/0'/0/0", // Standard Bitcoin path
      message: message,
    });

    if (result.success) {
      // Send signature to backend for verification
      const response = await fetch('/auth/trezor', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('input[name="_csrf"]')?.value || ''
        },
        body: JSON.stringify({
          message: message,
          signature: result.payload.signature,
          address: result.payload.address
        })
      });

      if (response.ok) {
        window.location.reload();
      } else {
        const error = await response.json();
        showAuthError(error.error || 'Trezor authentication failed');
      }
    } else {
      showAuthError(result.payload.error || 'Trezor signing cancelled');
    }
  } catch (error) {
    showAuthError('Trezor authentication error: ' + error.message);
  }
}
*/

async function loginWithNostr() {
  try {
    // Check if Nostr extension is available (desktop)
    if (window.nostr) {
      return await loginWithNostrExtension();
    } else {
      // Mobile/No extension fallback - show manual options
      return await showMobileNostrOptions();
    }
  } catch (error) {
    showAuthError('Nostr authentication error: ' + error.message);
  }
}

async function loginWithNostrExtension() {
  const pubkey = await window.nostr.getPublicKey();
  const message = "BitcoinPitch Authentication: " + Date.now();
  
  const event = {
    kind: 1,
    created_at: Math.floor(Date.now() / 1000),
    tags: [],
    content: message,
    pubkey: pubkey
  };

  const signedEvent = await window.nostr.signEvent(event);

  // Send signed event to backend for verification
  const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || '';
  const response = await fetch('/auth/nostr', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': csrfToken
    },
    body: JSON.stringify({
      event: signedEvent,
      message: message
    })
  });

  if (response.ok) {
    window.location.reload();
  } else {
    const error = await response.json();
    showAuthError(error.error || 'Nostr authentication failed');
  }
}

async function showMobileNostrOptions() {
  // Create mobile-friendly Nostr authentication UI
  const authResult = document.getElementById('auth-result');
  authResult.innerHTML = `
    <div class="mobile-nostr-options">
      <h3>Mobile Nostr Authentication</h3>
      <p>Choose an option to authenticate with Nostr on mobile:</p>
      
      <div class="mobile-nostr-method">
        <button onclick="showManualKeyInput()" class="button secondary">
          üîë Enter Your Private Key
        </button>
        <small>Temporarily enter your private key to sign in (not stored)</small>
      </div>
      
      <div class="mobile-nostr-method">
        <button onclick="redirectToNostrApp()" class="button primary">
          üì± Open Nostr App
        </button>
        <small>Use a mobile Nostr app like Damus, Amethyst, or Primal</small>
      </div>
      
      <div class="mobile-nostr-method">
        <button onclick="closeAuthModal()" class="button ghost">
          ‚ùå Cancel
        </button>
        <small>Browse without logging in - no authentication needed to view pitches</small>
      </div>
    </div>
  `;
}

function showManualKeyInput() {
  const authResult = document.getElementById('auth-result');
  authResult.innerHTML = `
    <div class="manual-key-input">
      <h3>Manual Key Authentication</h3>
      <p><strong>‚ö†Ô∏è Security Warning:</strong> Only use this on your personal device. Your key will not be stored.</p>
      
      <form onsubmit="handleManualKeyAuth(event)">
        <div class="form-group">
          <label for="manual-private-key">Private Key:</label>
          <input type="password" id="manual-private-key" placeholder="nsec1... or 64-character hex" maxlength="64" required>
          <small>Enter your Nostr private key in nsec format (nsec1...) or 64-character hex format (0-9, a-f)</small>
        </div>
        
        <div class="form-actions">
          <button type="submit" class="button primary">Sign In</button>
          <button type="button" onclick="showMobileNostrOptions()" class="button secondary">Back</button>
        </div>
      </form>
    </div>
  `;
  
  // Small delay to ensure DOM is ready, then focus the input
  setTimeout(() => {
    const input = document.getElementById('manual-private-key');
    if (input) {
      input.focus();
      console.log('Manual key input field focused and ready');
    } else {
      console.error('Manual key input field not found after DOM update');
    }
  }, 100);
}

async function handleManualKeyAuth(event) {
  event.preventDefault();
  console.log('Manual auth function called');
  
  // Check if the input element exists
  const privateKeyInput = document.getElementById('manual-private-key');
  if (!privateKeyInput) {
    console.error('manual-private-key input element not found');
    showAuthError('Form error: Input field not found. Please try again.');
    return;
  }
  
  const privateKey = privateKeyInput.value.trim();
  console.log('Private key length:', privateKey.length);
  
  // Basic validation - accept both nsec format and hex format
  const isNsecFormat = privateKey.startsWith('nsec1') && privateKey.length === 63;
  const isHexFormat = /^[0-9a-f]{64}$/i.test(privateKey);
  
  if (!privateKey || (!isNsecFormat && !isHexFormat)) {
    console.log('Validation failed: invalid format');
    showAuthError('Invalid private key format. Must be nsec format (nsec1...) or 64 hex characters.');
    return;
  }
  
  console.log('Key format detected:', isNsecFormat ? 'nsec' : 'hex');
  
  try {
    console.log('Starting authentication process...');
    // Show loading state
    const submitButton = event.target.querySelector('button[type="submit"]');
    if (!submitButton) {
      console.error('Submit button not found');
      showAuthError('Form error: Submit button not found. Please try again.');
      return;
    }
    
    const originalText = submitButton.textContent;
    submitButton.textContent = 'Signing in...';
    submitButton.disabled = true;
    
    // Send private key to backend for authentication
    const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || 
                     document.querySelector('input[name="_csrf"]')?.value || '';
    console.log('CSRF token:', csrfToken ? 'found' : 'not found');
    
    console.log('Making fetch request...');
    const response = await fetch('/auth/nostr-manual', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': csrfToken
      },
      body: JSON.stringify({
        private_key: privateKey
      })
    });

    console.log('Response status:', response.status);
    console.log('Response ok:', response.ok);

    if (response.ok) {
      const result = await response.json();
      console.log('Success result:', result);
      showAuthError('Authentication successful! Welcome, ' + result.user);
      // Clear the private key from memory
      if (privateKeyInput) {
        privateKeyInput.value = '';
      }
      // Reload page after success
      setTimeout(() => window.location.reload(), 1500);
    } else {
      const error = await response.json();
      console.log('Error result:', error);
      showAuthError(error.error || 'Manual authentication failed');
      // Restore button state
      if (submitButton) {
        submitButton.textContent = originalText;
        submitButton.disabled = false;
      }
    }
  } catch (error) {
    console.log('Exception caught:', error);
    showAuthError('Manual authentication failed: ' + error.message);
    // Restore button state
    const submitButton = event.target.querySelector('button[type="submit"]');
    if (submitButton) {
      submitButton.textContent = 'Sign In';
      submitButton.disabled = false;
    }
  }
}

function redirectToNostrApp() {
  // Try to detect mobile platform and redirect to appropriate Nostr app
  const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
  const isAndroid = /Android/.test(navigator.userAgent);
  
  let appUrl = '';
  let appName = '';
  
  if (isIOS) {
    // Try Damus first, then Primal
    appUrl = 'damus://';
    appName = 'Damus';
  } else if (isAndroid) {
    // Try Amethyst first, then Primal
    appUrl = 'amethyst://';
    appName = 'Amethyst';
  }
  
  if (appUrl) {
    const authResult = document.getElementById('auth-result');
    authResult.innerHTML = `
      <div class="app-redirect">
        <h3>Opening ${appName}...</h3>
        <p>If ${appName} doesn't open automatically:</p>
        <ol>
          <li>Install a Nostr app like ${isIOS ? 'Damus' : 'Amethyst'} or Primal</li>
          <li>Copy this website URL: ${window.location.origin}</li>
          <li>Open the URL in your Nostr app's browser</li>
          <li>Use the app's built-in authentication</li>
        </ol>
        <button onclick="showMobileNostrOptions()" class="button secondary">Back to Options</button>
      </div>
    `;
    
    // Try to open the app
    setTimeout(() => {
      window.location.href = appUrl;
    }, 1000);
    
    // Fallback: show app store links
    setTimeout(() => {
      const authResult = document.getElementById('auth-result');
      const storeLink = isIOS 
        ? 'https://apps.apple.com/app/damus/id1628663131'
        : 'https://play.google.com/store/apps/details?id=com.vitorpamplona.amethyst';
      
      authResult.innerHTML += `
        <div class="app-store-link">
          <p>Don't have a Nostr app yet?</p>
          <a href="${storeLink}" target="_blank" class="button primary">
            ${isIOS ? 'üì± Get Damus from App Store' : 'üì± Get Amethyst from Play Store'}
          </a>
        </div>
      `;
    }, 3000);
  } else {
    showAuthError('Please install a Nostr app like Damus (iOS) or Amethyst (Android) to continue.');
  }
}

// Handle HTMX responses
document.body.addEventListener('htmx:afterRequest', function(evt) {
  if (evt.detail.target.id === 'auth-result') {
    if (evt.detail.xhr.status === 200) {
      try {
        const response = JSON.parse(evt.detail.xhr.responseText);
        // Only reload on successful authentication, not on 2FA requirement
        if (response.message === "Authentication successful" || 
            (response.success && !response.requires_2fa)) {
          // Successful authentication, reload page
          window.location.reload();
        }
        // If requires_2fa is true, let the other handler deal with it
      } catch (e) {
        // Response is not JSON (might be HTML), assume success and reload
        window.location.reload();
      }
    }
  }
});
</script>
{{ end }} 